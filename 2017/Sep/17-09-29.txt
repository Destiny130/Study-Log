Want to do and completed
   1. Found a JS method that can execute better function yesterday.
            https://codepen.io/chriscoyier/pen/JYyXjX        or in         https://github.com/TheNotary/IndeterminateCheckboxes
   2. Create a Dictionary<string,List<SelectListItem>> to transmit a model
      Use two foreach method in both controller and view to write/read data with loop.
   
Want to do, tried but don't have enough abilities


Have an idea, and would try it later



Today's appendix:
   1. <script>
      $('input[type="checkbox"]').change(function (e) {

                var checked = $(this).prop("checked"),
                    container = $(this).parent(),
                    siblings = container.siblings();

                container.find('input[type="checkbox"]').prop({
                    indeterminate: false,
                    checked: checked
                });
                
                function checkSiblings(el) {

                    var parent = el.parent().parent(),
                        all = true;

                    el.siblings().each(function () {
                        return all = ($(this).children('input[type="checkbox"]').prop("checked") === checked);
                    });

                    if (all && checked) {

                        parent.children('input[type="checkbox"]').prop({
                            indeterminate: false,
                            checked: checked
                        });

                        checkSiblings(parent);

                    } else if (all && !checked) {

                        parent.children('input[type="checkbox"]').prop("checked", checked);
                        parent.children('input[type="checkbox"]').prop("indeterminate", (parent.find('input[type="checkbox"]:checked').length > 0));
                        checkSiblings(parent);

                    } else {

                        el.parents("li").children('input[type="checkbox"]').prop({
                            indeterminate: true,
                            checked: false
                        });
                    }
                }

                checkSiblings(container);
            });
      </script>
